name: build

on: [push, pull_request]

jobs:
  unix:
    strategy:
      matrix:
        os: [ubuntu, macos]
    name: ${{matrix.os}}
    runs-on: ${{matrix.os}}-latest
    steps:
    - uses: actions/checkout@v1
    - name: make test
      run: |
        make -j2 config=sanitize test
        make -j2 config=debug test
        make -j2 config=release test
        make -j2 config=coverage test
    - name: make gltfpack
      run: |
        make -j2 config=release gltfpack
        strip gltfpack
    - name: upload coverage
      run: |
        find . -type f -name '*.gcno' -exec gcov -p {} +
        sed -i -e "s/#####\(.*\)\(\/\/ unreachable.*\)/    -\1\2/" *.gcov
        bash <(curl -s https://codecov.io/bash) -f 'src#*.gcov' -X search -t ${{secrets.CODECOV_TOKEN}} -B ${{github.ref}}
    - uses: actions/upload-artifact@v1
      with:
        name: gltfpack-${{matrix.os}}
        path: gltfpack

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [Win32, x64]
    steps:
    - uses: actions/checkout@v1
    - name: cmake configure
      run: cmake . -DMESHOPT_BUILD_DEMO=ON -DMESHOPT_BUILD_GLTFPACK=ON -DCMAKE_MSVC_RUNTIME_LIBRARY="MultiThreaded$<$<CONFIG:Debug>:Debug>" -A ${{matrix.arch}}
    - name: cmake test
      shell: bash # necessary for fail-fast
      run: |
        cmake --build . -- -property:Configuration=Debug -verbosity:minimal
        Debug/demo.exe demo/pirate.obj
        cmake --build . -- -property:Configuration=Release -verbosity:minimal
        Release/demo.exe demo/pirate.obj
    - uses: actions/upload-artifact@v1
      with:
        name: gltfpack-windows
        path: Release/gltfpack.exe
      if: matrix.arch == 'x64'

  nodejs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '13.x'
    - name: test
      run: node js/meshopt_decoder.test.js
    - name: test simd
      run: |
        export CANARY=canary20200504008edc4c19
        curl https://nodejs.org/download/v8-canary/v15.0.0-v8-$CANARY/node-v15.0.0-v8-$CANARY-linux-x64.tar.gz | tar -xz
        node-v15.0.0-v8-$CANARY-linux-x64/bin/node --experimental-wasm-simd js/meshopt_decoder.test.js

  gltfpack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/checkout@v2
      with:
        repository: KhronosGroup/glTF-Sample-Models
        path: glTF-Sample-Models
    - name: make
      run: make -j2 config=sanitize gltfpack
    - name: test
      run: find glTF-Sample-Models/2.0/ -name *.gltf -or -name *.glb | xargs ./gltfpack -cc -test
    - name: pack
      run: find glTF-Sample-Models/2.0/ -name *.gltf | grep -v glTF-Draco | xargs -I '{}' ./gltfpack -i '{}' -o '{}pack.gltf'
    - name: validate
      run: |
        curl -sL $VALIDATOR | tar xJ
        find glTF-Sample-Models/2.0/ -name *.gltfpack.gltf | xargs -L 1 ./gltf_validator -r -a
      env:
        VALIDATOR: https://github.com/KhronosGroup/glTF-Validator/releases/download/2.0.0-dev.3.2/gltf_validator-2.0.0-dev.3.2-linux64.tar.xz

  arm64:
    runs-on: ubuntu-latest
    steps:
    - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: 'uname -a'
    - uses: actions/checkout@v1
    - name: make test
      uses: docker://multiarch/ubuntu-core:arm64-bionic
      with:
        args: 'bash -c "apt-get update && apt-get install -y build-essential && make -j2 config=coverage test"'
    - name: upload coverage
      run: |
        find . -type f -name '*.gcno' -exec gcov -p {} +
        sed -i -e "s/#####\(.*\)\(\/\/ unreachable.*\)/    -\1\2/" *.gcov
        bash <(curl -s https://codecov.io/bash) -f 'src#*.gcov' -X search -t ${{secrets.CODECOV_TOKEN}} -B ${{github.ref}}

  iphone:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: make
      run: make -j2 config=iphone
